{"version":3,"sources":["../src/lib/pagination/defaultOptions.ts","../src/lib/types/Options.ts","../src/lib/pagination/PaginationEmbed.ts","../src/lib/utils/util.ts","../src/lib/pagination/Pagination.ts"],"names":["ExtraRowPosition"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ButtonStyle } from 'discord.js';\n\nimport type { Options } from '../types';\n\n/**\n * The default options for the paginator.\n */\nexport const defaultOptions: Options = {\n\tfirstEmoji: '⏪',\n\tprevEmoji: '◀️',\n\tnextEmoji: '▶️',\n\tlastEmoji: '⏭',\n\tfirstLabel: '',\n\tprevLabel: '',\n\tnextLabel: '',\n\tlastLabel: '',\n\tlimit: 5,\n\tidle: 5 * 60 * 1_000,\n\tephemeral: false,\n\tprevDescription: '',\n\tpostDescription: '',\n\tattachments: [],\n\tcontents: [],\n\tbuttonStyle: ButtonStyle.Secondary,\n\tloop: false\n};\n","import type { PButtonStyle } from './ButtonsOptions';\nimport type { EmojiOptions } from './EmojiOptions';\nimport type { APIAttachment, APIEmbed, Attachment, AttachmentBuilder, AttachmentPayload, BufferResolvable, JSONEncodable } from 'discord.js';\nimport type { Stream } from 'node:stream';\n\nexport type PEmbeds = (APIEmbed | JSONEncodable<APIEmbed>)[];\nexport type PAttachments = (Attachment | AttachmentBuilder | AttachmentPayload | BufferResolvable | JSONEncodable<APIAttachment> | Stream)[];\n\nexport enum ExtraRowPosition {\n\tAbove,\n\tBelow\n}\n\n/**\n * The options to customize the pagination.\n */\nexport interface Options extends EmojiOptions {\n\t/**\n\t * The attachments to show with the paginated messages.\n\t *\n\t * @defaultValue []\n\t */\n\tattachments: PAttachments;\n\t/**\n\t * The style of the paginator buttons.\n\t *\n\t * @defaultValue \"SECONDARY\"\n\t */\n\tbuttonStyle: PButtonStyle;\n\t/**\n\t * Contents if changing contents per page.\n\t *\n\t * @defaultValue []\n\t */\n\tcontents: string[];\n\t/**\n\t * Whether the reply should be ephemeral.\n\t *\n\t * @defaultValue false\n\t */\n\tephemeral: boolean;\n\t/**\n\t * The label for the first page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tfirstLabel: string;\n\t/**\n\t * The number of seconds before the paginator will close after inactivity.\n\t *\n\t * @defaultValue 5 minutes\n\t */\n\tidle: number;\n\t/**\n\t * The label for the last page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tlastLabel: string;\n\t/**\n\t * The number of entries to show per page.\n\t *\n\t * @defaultValue 5\n\t */\n\tlimit: number;\n\t/**\n\t * loop through the pages.\n\t *\n\t * @defaultValue false\n\t */\n\tloop: boolean;\n\t/**\n\t * The label for the next page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tnextLabel: string;\n\n\t/**\n\t * The description to show after the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tpostDescription: string;\n\t/**\n\t * The description to show before the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tprevDescription: string;\n\t/**\n\t * The label for the previous page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tprevLabel: string;\n}\n","import {\n\tActionRowBuilder,\n\tButtonBuilder,\n\tEmbedBuilder,\n\tnormalizeArray,\n\ttype APIEmbed,\n\ttype APIEmbedField,\n\ttype ButtonInteraction,\n\ttype ComponentEmojiResolvable,\n\ttype JSONEncodable,\n\ttype MessageActionRowComponentBuilder,\n\ttype RestOrArray\n} from 'discord.js';\n\nimport { defaultOptions } from './defaultOptions.js';\n\nimport {\n\tExtraRowPosition,\n\ttype ButtonsOptions,\n\ttype EmojiOptions,\n\ttype LabelOptions,\n\ttype Options,\n\ttype PAttachments,\n\ttype Payload,\n\ttype PButtonBuilder,\n\ttype PButtonStyle,\n\ttype PEmbeds\n} from '../types/index.js';\n\n/**\n * The PaginationEmbed class.\n */\nexport abstract class PaginationEmbed extends EmbedBuilder {\n\t/**\n\t * Pagination button infos.\n\t *\n\t * @readonly\n\t * @defaultValue `defaultOptions.buttonInfo`\n\t */\n\tpublic readonly buttonInfo: ButtonsOptions;\n\n\t/**\n\t * The images to paginate through.\n\t */\n\tpublic images: string[];\n\n\t/**\n\t * The descriptions to paginate through.\n\t */\n\tpublic descriptions: string[];\n\n\t/**\n\t * The action rows of the final message.\n\t */\n\tpublic actionRows: ActionRowBuilder<MessageActionRowComponentBuilder>[];\n\n\t/**\n\t * The total number of entries.\n\t */\n\tpublic totalEntry: number;\n\n\t/**\n\t * The total number of pages.\n\t */\n\tpublic totalPages: number;\n\n\t/**\n\t * The current page number.\n\t */\n\tpublic currentPage!: number;\n\n\t/**\n\t * The limit of entries per page.\n\t *\n\t * @defaultValue 5\n\t */\n\tpublic limit!: number;\n\n\t/**\n\t * The idle time before closing.\n\t *\n\t * @defaultValue 5 * 60 * 1_000\n\t */\n\tpublic idle!: number;\n\n\t/**\n\t * Whether the reply should be ephemeral or not.\n\t *\n\t * @defaultValue false\n\t */\n\tpublic ephemeral!: boolean;\n\n\t/**\n\t * The description to show before the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tpublic prevDescription!: string;\n\n\t/**\n\t * The description to show after the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tpublic postDescription!: string;\n\n\t/**\n\t * Whether to loop through the pages or not.\n\t *\n\t * @defaultValue false\n\t */\n\tpublic loop!: boolean;\n\n\t/**\n\t * The embeds if paginating through embeds.\n\t *\n\t * @defaultValue []\n\t */\n\tpublic embeds: PEmbeds;\n\n\t/**\n\t * The attachments to show with the paginated messages.\n\t *\n\t * @defaultValue []\n\t */\n\tpublic attachments!: PAttachments;\n\n\t/**\n\t * Whether if paginating through embed's fields.\n\t *\n\t * @defaultValue false\n\t */\n\tpublic fieldPaginate!: boolean;\n\n\t/**\n\t * The pagination buttons.\n\t */\n\tpublic buttons!: Record<string, PButtonBuilder | undefined>;\n\n\t/**\n\t * Contents if changing contents per page.\n\t *\n\t * @defaultValue []\n\t */\n\tprivate contents!: (string | null)[] | string | null;\n\n\t/**\n\t * The payload of the final message.\n\t *\n\t * @readonly\n\t */\n\tprivate readonly payload: Payload;\n\n\t/**\n\t * Whether the footer is a custom footer or not.\n\t *\n\t */\n\tprivate customFooter: boolean;\n\n\t/**\n\t * The main action row.\n\t *\n\t * @readonly\n\t */\n\tprivate readonly mainActionRow: ActionRowBuilder<MessageActionRowComponentBuilder>;\n\n\t/**\n\t * All the fields if paginating through fields.\n\t */\n\tprivate rawFields: APIEmbedField[];\n\n\t/**\n\t * The extra action rows to add, if any.\n\t *\n\t * @defaultValue []\n\t */\n\tprivate readonly extraRows: {\n\t\tposition: ExtraRowPosition;\n\t\trows: ActionRowBuilder<MessageActionRowComponentBuilder>[];\n\t}[];\n\n\t/**\n\t * The raw footer text.\n\t *\n\t */\n\tprivate rawFooter!: string;\n\n\t/**\n\t * Changed default buttons\n\t *\n\t */\n\tprivate changedButtons?: boolean;\n\n\t/**\n\t * @param options - The pagination options\n\t * @example\n\t * ```javascript\n\t * const pagination = new PaginationEmbed({\n\t *  firstEmoji: \"⏮\",\n\t *  prevEmoji: \"◀️\",\n\t *  nextEmoji: \"▶️\",\n\t *  lastEmoji: \"⏭\",\n\t *  limit: 5,\n\t *  idle: 5 * 60 * 1000,\n\t *  ephemeral: false,\n\t *  prevDescription: \"\",\n\t *  postDescription: \"\",\n\t *  attachments: [],\n\t *  buttonStyle: ButtonStyle.Secondary,\n\t *  loop: false,\n\t * });\n\t * ```\n\t */\n\tpublic constructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tconst mergedOptions = { ...defaultOptions, ...options };\n\t\tthis.buttonInfo = {\n\t\t\tfirst: {\n\t\t\t\temoji: mergedOptions.firstEmoji,\n\t\t\t\tlabel: mergedOptions.firstLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t},\n\t\t\tprev: {\n\t\t\t\temoji: mergedOptions.prevEmoji,\n\t\t\t\tlabel: mergedOptions.prevLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\temoji: mergedOptions.nextEmoji,\n\t\t\t\tlabel: mergedOptions.nextLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t},\n\t\t\tlast: {\n\t\t\t\temoji: mergedOptions.lastEmoji,\n\t\t\t\tlabel: mergedOptions.lastLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t}\n\t\t};\n\t\tthis.images = [];\n\t\tthis.descriptions = [];\n\t\tthis.embeds = [];\n\t\tthis.actionRows = [];\n\t\tthis.payload = {};\n\t\tthis.totalEntry = 0;\n\t\tthis.totalPages = 0;\n\t\tthis.currentPage = 1;\n\t\tthis.customFooter = true;\n\t\tthis.rawFields = [];\n\t\tthis.mainActionRow = new ActionRowBuilder();\n\t\tthis.extraRows = [];\n\t\tthis.setOptions(mergedOptions);\n\t}\n\n\t/**\n\t * Appends fields to the embed\n\t *\n\t * @remarks\n\t * This method accepts either an array of fields or a variable number of field parameters.\n\t * The maximum amount of fields that can be added is 25.\n\t * @example\n\t * Using an array\n\t * ```ts\n\t * const fields: APIEmbedField[] = ...;\n\t * const pagination = new Pagination(interaction)\n\t * \t.addFields(fields);\n\t * ```\n\t * @example\n\t * Using rest parameters (variadic)\n\t * ```ts\n\t * const pagination = new Pagination(interaction)\n\t * \t.addFields(\n\t * \t\t{ name: 'Field 1', value: 'Value 1' },\n\t * \t\t{ name: 'Field 2', value: 'Value 2' },\n\t * \t);\n\t * ```\n\t * @param fields - The fields to add\n\t */\n\tpublic override addFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\tthis.rawFields.push(...normalizeArray(fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields in the embed.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice}.\n\t * The maximum amount of fields that can be added is 25.\n\t *\n\t * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n\t * @example\n\t * Remove the first field\n\t * ```ts\n\t * pagination.spliceFields(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n fields\n\t * ```ts\n\t * const n = 4\n\t * pagination.spliceFields(0, n);\n\t * ```\n\t * @example\n\t * Remove the last field\n\t * ```ts\n\t * pagination.spliceFields(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of fields to remove\n\t * @param fields - The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\tif (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the embed's fields\n\t *\n\t * @remarks\n\t * This method is an alias for {@link PaginationEmbed.spliceFields}. More specifically,\n\t * it splices the entire array of fields, replacing them with the provided fields.\n\t *\n\t * You can set a maximum of 25 fields.\n\t * @param fields - The fields to set\n\t */\n\tpublic override setFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\tthis.rawFields = normalizeArray(fields);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination options.\n\t *\n\t * @param options - The pagination options\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setOptions({\n\t *    firstEmoji: \"⏮\",\n\t *    prevEmoji: \"◀️\",\n\t *    nextEmoji: \"▶️\",\n\t *    lastEmoji: \"⏭\",\n\t *    limit: 5,\n\t *    idle: 5 * 60 * 1000,\n\t *    ephemeral: false,\n\t *    prevDescription: \"\",\n\t *    postDescription: \"\",\n\t *    attachments: [],\n\t *    buttonStyle: ButtonStyle.Secondary,\n\t *    loop: false,\n\t *  });\n\t * ```\n\t */\n\tpublic setOptions(options: Partial<Options>): this {\n\t\tthis.setEmojis({\n\t\t\tfirstEmoji: options.firstEmoji,\n\t\t\tprevEmoji: options.prevEmoji,\n\t\t\tnextEmoji: options.nextEmoji,\n\t\t\tlastEmoji: options.lastEmoji\n\t\t});\n\t\tif (options.buttonStyle) this.setStyle(options.buttonStyle);\n\t\tthis.setLabels({\n\t\t\tfirstLabel: options.firstLabel,\n\t\t\tprevLabel: options.prevLabel,\n\t\t\tnextLabel: options.nextLabel,\n\t\t\tlastLabel: options.lastLabel\n\t\t});\n\t\tthis.limit = options.limit ?? this.limit;\n\t\tthis.idle = options.idle ?? this.idle;\n\t\tthis.ephemeral = options.ephemeral ?? this.ephemeral;\n\t\tthis.loop = options.loop ?? this.loop;\n\t\tthis.prevDescription = typeof options.prevDescription === 'string' ? options.prevDescription : this.prevDescription;\n\t\tthis.postDescription = typeof options.postDescription === 'string' ? options.postDescription : this.postDescription;\n\t\tthis.attachments = options.attachments ?? this.attachments;\n\t\tthis.contents = options.contents ?? this.contents;\n\t\tthis.setButtons();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination images.\n\t *\n\t * @param images - The images to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setImages([\"1st image\", \"2nd image\", \"3rd image\"]);\n\t * ```\n\t */\n\tpublic setImages(...images: RestOrArray<string>): this {\n\t\tthis.images = normalizeArray(images);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple pagination images.\n\t *\n\t * @param images - The images to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setImages([\"1st image\", \"2nd image\", \"3rd image\"])\n\t *  .addImages([\"4st image\", \"5nd image\", \"6rd image\"]);\n\t * ```\n\t */\n\tpublic addImages(...images: RestOrArray<string>): this {\n\t\tthis.images.push(...normalizeArray(images));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination descriptions.\n\t *\n\t * @param descriptions - The descriptions to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setDescriptions([\"1st description\", \"2nd description\", \"3rd description\"]);\n\t * ```\n\t */\n\tpublic setDescriptions(...descriptions: RestOrArray<string>): this {\n\t\tthis.descriptions = normalizeArray(descriptions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple pagination descriptions.\n\t *\n\t * @param descriptions - The descriptions to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setDescriptions([\"1st description\", \"2nd description\", \"3rd description\"])\n\t *  .addDescriptions([\"4st description\", \"5nd description\", \"6rd description\"]);\n\t * ```\n\t */\n\tpublic addDescriptions(...descriptions: RestOrArray<string>): this {\n\t\tthis.descriptions.push(...normalizeArray(descriptions));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination embeds.\n\t * Note: if you set this then all other pagination methods and embed methods will be ignored\n\t * i.e., descriptions, images, fields, also the embed properties like title, footer and all\n\t *\n\t * @param embeds - The embeds to set\n\t * @param template - A template function that will be called for each embed.\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()]);\n\t * ```\n\t */\n\tpublic setEmbeds(embeds: PEmbeds, template?: (embed: EmbedBuilder, i: number, array: PEmbeds) => JSONEncodable<APIEmbed>): this {\n\t\tif (template)\n\t\t\tembeds = embeds.map((embed, index, array) => template(embed instanceof EmbedBuilder ? embed : EmbedBuilder.from(embed), index, array));\n\n\t\tthis.embeds = embeds;\n\t\tthis.limit = 1;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple pagination embeds.\n\t *\n\t * @param embeds - An array of [EmbedBuilder](https://discord.js.org/#/docs/discord.js/main/class/EmbedBuilder)\n\t *  or [APIEmbed](https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbed)\n\t * @param template - A template function that will be called for each embed.\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()])\n\t *  .addEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()]);\n\t * ```\n\t */\n\tpublic addEmbeds(embeds: PEmbeds, template?: (embed: EmbedBuilder) => JSONEncodable<APIEmbed>): this {\n\t\tif (template) embeds = embeds.map((embed) => template(EmbedBuilder.from(embed)));\n\n\t\tthis.embeds.push(...embeds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Paginates through fields.\n\t * It will be ignored if you are not paginating through fields.\n\t *\n\t * @param paginate - Whether to paginate fields\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setFields([{\n\t *    name: \"Field 1\",\n\t *    value: \"Field 1 value\",\n\t *  },\n\t *  {\n\t *    name: \"Field 2\",\n\t *    value: \"Field 2 value\",\n\t *  }])\n\t *  .paginateFields();\n\t * ```\n\t */\n\tpublic paginateFields(paginate = true): this {\n\t\tthis.fieldPaginate = paginate;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the idle time before closing for the pagination.\n\t *\n\t * @param idle - The idle time\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setIdle(5 * 60 * 1000);\n\t * ```\n\t */\n\tpublic setIdle(idle: number): this {\n\t\tthis.idle = idle;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set whether the pagination reply should be ephemeral or not.\n\t *\n\t * @param ephemeral - Whether the reply should be ephemeral\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEphemeral(true);\n\t * ```\n\t */\n\tpublic setEphemeral(ephemeral = true): this {\n\t\tthis.ephemeral = ephemeral;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the limit of entries per page for pagination.\n\t *\n\t * @param limit - Limit of entries per page\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setLimit(5);\n\t * ```\n\t */\n\tpublic setLimit(limit: number): this {\n\t\tthis.limit = limit;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a fixed prev description which will be shown in all pages before the paginated descriptions.\n\t * It will be ignored if you are not paginating through descriptions.\n\t *\n\t * @param prevDescription - The prev description to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setPrevDescription(\"role info\");\n\t * ```\n\t */\n\tpublic setPrevDescription(prevDescription: string): this {\n\t\tthis.prevDescription = prevDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a fixed post description which will be shown in all pages after the paginated descriptions.\n\t * It will be ignored if you are not paginating through descriptions.\n\t *\n\t * @param postDescription - The post description to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setPostDescription(\"role id: 123456789\");\n\t * ```\n\t */\n\tpublic setPostDescription(postDescription: string): this {\n\t\tthis.postDescription = postDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emojis for the buttons.\n\t *\n\t * @param emojiOptions - The emoji options to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEmojis({\n\t *    firstEmoji: \":first_emoji:\",\n\t *    prevEmoji: \":prev_emoji:\",\n\t *    nextEmoji: \":next_emoji:\",\n\t *    lastEmoji: \":last_emoji:\"\n\t *  });\n\t * ```\n\t */\n\tpublic setEmojis(emojiOptions: Partial<EmojiOptions>): this {\n\t\tthis.buttonInfo.first.emoji = emojiOptions.firstEmoji ?? this.buttonInfo.first.emoji;\n\t\tthis.buttonInfo.prev.emoji = emojiOptions.prevEmoji ?? this.buttonInfo.prev.emoji;\n\t\tthis.buttonInfo.next.emoji = emojiOptions.nextEmoji ?? this.buttonInfo.next.emoji;\n\t\tthis.buttonInfo.last.emoji = emojiOptions.lastEmoji ?? this.buttonInfo.last.emoji;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the labels for the buttons.\n\t *\n\t * @param labelOptions - The label options to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setLabels({\n\t *    firstLabel: \"first\",\n\t *    prevLabel: \"prev\",\n\t *    nextLabel: \"next\",\n\t *    lastLabel: \"last\"\n\t *  });\n\t * ```\n\t */\n\tpublic setLabels(labelOptions: Partial<LabelOptions>): this {\n\t\tthis.buttonInfo.first.label = labelOptions.firstLabel ?? this.buttonInfo.first.label;\n\t\tthis.buttonInfo.prev.label = labelOptions.prevLabel ?? this.buttonInfo.prev.label;\n\t\tthis.buttonInfo.next.label = labelOptions.nextLabel ?? this.buttonInfo.next.label;\n\t\tthis.buttonInfo.last.label = labelOptions.lastLabel ?? this.buttonInfo.last.label;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the buttons' style.\n\t *\n\t * @param style - The style of the buttons\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setStyle(ButtonStyle.Secondary);\n\t * ```\n\t */\n\tpublic setStyle(style: PButtonStyle): this {\n\t\tthis.buttonInfo.first.style = style;\n\t\tthis.buttonInfo.prev.style = style;\n\t\tthis.buttonInfo.next.style = style;\n\t\tthis.buttonInfo.last.style = style;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Customizes the styles of each button.\n\t *\n\t * @param options - The styles of the buttons\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setButtonAppearance({\n\t *    first: {\n\t *      label: \"First\",\n\t *      emoji: \":first_emoji:\",\n\t *      style: ButtonStyle.Secondary\n\t *    }\n\t *  });\n\t * ```\n\t */\n\tpublic setButtonAppearance(options: ButtonsOptions): this {\n\t\tconst { first, prev, next, last } = options;\n\t\tthis.buttonInfo.first.label = first.label ?? this.buttonInfo.first.label;\n\t\tthis.buttonInfo.prev.label = prev.label ?? this.buttonInfo.prev.label;\n\t\tthis.buttonInfo.next.label = next.label ?? this.buttonInfo.next.label;\n\t\tthis.buttonInfo.last.label = last.label ?? this.buttonInfo.last.label;\n\n\t\tthis.buttonInfo.first.emoji = first.emoji ?? this.buttonInfo.first.emoji;\n\t\tthis.buttonInfo.prev.emoji = prev.emoji ?? this.buttonInfo.prev.emoji;\n\t\tthis.buttonInfo.next.emoji = next.emoji ?? this.buttonInfo.next.emoji;\n\t\tthis.buttonInfo.last.emoji = last.emoji ?? this.buttonInfo.last.emoji;\n\n\t\t/* eslint-disable @typescript-eslint/no-unnecessary-condition */\n\t\tthis.buttonInfo.first.style = first.style ?? this.buttonInfo.first.style;\n\t\tthis.buttonInfo.prev.style = prev.style ?? this.buttonInfo.prev.style;\n\t\tthis.buttonInfo.next.style = next.style ?? this.buttonInfo.next.style;\n\t\tthis.buttonInfo.last.style = last.style ?? this.buttonInfo.last.style;\n\t\t/* eslint-enable @typescript-eslint/no-unnecessary-condition */\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set pagination buttons\n\t *\n\t * @param buttons - The buttons to set\n\t */\n\n\tpublic setButtons(buttons?: Record<string, ButtonBuilder>) {\n\t\tif (buttons) this.changedButtons = true;\n\t\tthis.buttons = (buttons ?? {\n\t\t\tfirst: new ButtonBuilder().setCustomId('paginate-first'),\n\t\t\tprev: new ButtonBuilder().setCustomId('paginate-prev'),\n\t\t\tnext: new ButtonBuilder().setCustomId('paginate-next'),\n\t\t\tlast: new ButtonBuilder().setCustomId('paginate-last')\n\t\t}) as Record<string, PButtonBuilder>;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a custom action row below or above the pagination button action row.\n\t *\n\t * @param actionRows - The action rows to add\n\t * @param position - The position where the action rows to be added\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .addActionRows([new ActionRowBuilder()], ExtraRowPosition.Below);\n\t * ```\n\t */\n\tpublic addActionRows(actionRows: ActionRowBuilder<MessageActionRowComponentBuilder>[], position = ExtraRowPosition.Below): this {\n\t\tthis.extraRows.push({\n\t\t\trows: actionRows,\n\t\t\tposition\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends an attachment along with the embed.\n\t *\n\t * @param attachments - The attachments to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAttachments([new AttachmentBuilder()]);\n\t * ```\n\t */\n\tpublic setAttachments(attachments: PAttachments): this {\n\t\tthis.attachments = attachments;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an attachment to the existing attachments.\n\t *\n\t * @param attachment - The attachment to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAttachments([new AttachmentBuilder()])\n\t *  .addAttachment(new AttachmentBuilder());\n\t * ```\n\t */\n\tpublic addAttachment(attachment: PAttachments[number]): this {\n\t\tthis.attachments.push(attachment);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple attachments to the existing attachments.\n\t *\n\t * @param attachments - The attachments to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAttachments([new AttachmentBuilder()])\n\t *  .addAttachments([new AttachmentBuilder(), new AttachmentBuilder()]);\n\t * ```\n\t */\n\tpublic addAttachments(attachments: PAttachments): this {\n\t\tthis.attachments.push(...attachments);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the pagination to go to a specific page.\n\t *\n\t * @param pageNumber - The page number to jump to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setLimit(1)\n\t *  .setDescriptions([\"1st page\", \"2nd page\", \"3rd page\", \"4th page\", \"5th page\"]);\n\t * ...\n\t * pagination.goToPage(2);\n\t * ```\n\t */\n\tpublic goToPage(pageNumber: number): this {\n\t\tif (pageNumber < 1) pageNumber = this.totalPages;\n\t\tif (pageNumber > this.totalPages) pageNumber = 1;\n\t\tthis.currentPage = pageNumber;\n\t\tif (this.embeds.length) {\n\t\t\tconst embed = this.embeds[this.currentPage - 1];\n\t\t\tthis.payload.embeds = [EmbedBuilder.from(embed)];\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!this.data.footer) {\n\t\t\tthis.customFooter = false;\n\t\t\tthis.rawFooter = 'Pages: {pageNumber}/{totalPages}';\n\t\t} else if (this.customFooter && !this.rawFooter) this.rawFooter = this.data.footer.text;\n\n\t\tthis.setFooter({\n\t\t\ttext: this.rawFooter.replaceAll('{pageNumber}', `${pageNumber}`).replaceAll('{totalPages}', `${this.totalPages}`),\n\t\t\ticonURL: this.data.footer?.icon_url\n\t\t});\n\t\tif (this.images.length) this.setImage(this.images[pageNumber - 1]);\n\n\t\t// TODO: remove null from content in a next major version. Djs changed the typings in a minor version.\n\t\tthis.payload.content = (Array.isArray(this.contents) ? this.contents[this.currentPage - 1] : this.contents) ?? undefined;\n\t\tif (this.descriptions.length) {\n\t\t\tthis.setDescription(\n\t\t\t\t`${this.prevDescription}\\n` +\n\t\t\t\t\t`${this.descriptions.slice(pageNumber * this.limit - this.limit, pageNumber * this.limit).join('\\n')}\\n${this.postDescription}`\n\t\t\t);\n\t\t}\n\n\t\tif (this.fieldPaginate) super.setFields(this.rawFields.slice(pageNumber * this.limit - this.limit, pageNumber * this.limit));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends contents along with the embed.\n\t *\n\t * @param contents - The contents to send.\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setContents([\"this is the first page\", \"this is the second page\"]);\n\t * ```\n\t */\n\tpublic setContents(contents: (string | null)[] | string | null): this {\n\t\tthis.contents = contents;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepares the pagination.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.ready();\n\t * ```\n\t */\n\tpublic ready(): Payload {\n\t\tif (!this.fieldPaginate) this.setFields(this.rawFields);\n\n\t\tthis.totalEntry =\n\t\t\tthis.embeds.length || Math.max(this.descriptions.length, this.images.length, this.fieldPaginate ? this.rawFields.length : 0);\n\t\tthis.totalPages = Math.ceil(this.totalEntry / this.limit);\n\t\tthis._readyPayloads();\n\t\tthis.goToPage(this.currentPage);\n\t\treturn this.payload;\n\t}\n\n\t/**\n\t * Goes to the first page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goFirst(i);\n\t * ```\n\t */\n\tprotected async goFirst(interaction: ButtonInteraction) {\n\t\tthis.currentPage = 1;\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.first?.setDisabled();\n\t\t\tthis.buttons.prev?.setDisabled();\n\t\t}\n\n\t\tthis.buttons.next?.setDisabled(false);\n\t\tthis.buttons.last?.setDisabled(false);\n\n\t\tthis.goToPage(1);\n\n\t\tawait interaction.update(this.payload);\n\t}\n\n\t/**\n\t * Goes to the previous page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goPrev(i);\n\t * ```\n\t */\n\tprotected async goPrev(interaction: ButtonInteraction) {\n\t\tthis.currentPage--;\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.first?.setDisabled(this.currentPage === 1);\n\t\t\tthis.buttons.prev?.setDisabled(this.currentPage === 1);\n\t\t}\n\n\t\tthis.buttons.next?.setDisabled(false);\n\t\tthis.buttons.last?.setDisabled(false);\n\t\tthis.goToPage(this.currentPage);\n\t\tawait interaction.update(this.payload);\n\t}\n\n\t/**\n\t * Goes to the next page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goNext(i);\n\t * ```\n\t */\n\tprotected async goNext(interaction: ButtonInteraction) {\n\t\tthis.currentPage++;\n\t\tthis.buttons.prev?.setDisabled(false);\n\t\tthis.buttons.first?.setDisabled(false);\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.next?.setDisabled(this.currentPage === Math.ceil(this.totalEntry / this.limit));\n\t\t\tthis.buttons.last?.setDisabled(this.currentPage === Math.ceil(this.totalEntry / this.limit));\n\t\t}\n\n\t\tthis.goToPage(this.currentPage);\n\t\tawait interaction.update(this.payload);\n\t}\n\n\t/**\n\t * Goes to the last page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goLast(i);\n\t * ```\n\t */\n\tprotected async goLast(interaction: ButtonInteraction) {\n\t\tthis.currentPage = Math.ceil(this.totalEntry / this.limit);\n\t\tthis.buttons.prev?.setDisabled(false);\n\t\tthis.buttons.first?.setDisabled(false);\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.next?.setDisabled();\n\t\t\tthis.buttons.last?.setDisabled();\n\t\t}\n\n\t\tthis.goToPage(this.currentPage);\n\t\tawait interaction.update(this.payload);\n\t}\n\n\tprivate _readyButton(\n\t\tbutton: ButtonBuilder | undefined,\n\t\tlabel: string | undefined,\n\t\temoji: ComponentEmojiResolvable | undefined,\n\t\tstyle: PButtonStyle\n\t): this {\n\t\tif (!button) return this;\n\t\tif (label) button.setLabel(label);\n\t\tif (emoji) button.setEmoji(emoji);\n\t\tbutton.setStyle(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepare the message's action rows for pagination.\n\t *\n\t * @returns\n\t */\n\tprivate _readyActionRows(): this {\n\t\tif (!this.changedButtons) {\n\t\t\tthis._readyButton(this.buttons.first, this.buttonInfo.first.label, this.buttonInfo.first.emoji, this.buttonInfo.first.style);\n\t\t\tthis._readyButton(this.buttons.prev, this.buttonInfo.prev.label, this.buttonInfo.prev.emoji, this.buttonInfo.prev.style);\n\t\t\tthis._readyButton(this.buttons.next, this.buttonInfo.next.label, this.buttonInfo.next.emoji, this.buttonInfo.next.style);\n\t\t\tthis._readyButton(this.buttons.last, this.buttonInfo.last.label, this.buttonInfo.last.emoji, this.buttonInfo.last.style);\n\t\t}\n\n\t\tthis.buttons.first?.setDisabled();\n\t\tthis.buttons.prev?.setDisabled();\n\t\tthis.buttons.next?.setDisabled();\n\t\tthis.buttons.last?.setDisabled();\n\t\tif (this.totalEntry > this.limit) {\n\t\t\tthis.buttons.last?.setDisabled(false);\n\t\t\tthis.buttons.next?.setDisabled(false);\n\t\t}\n\n\t\tif (this.loop && this.totalEntry > this.limit) {\n\t\t\tthis.buttons.first?.setDisabled(false);\n\t\t\tthis.buttons.prev?.setDisabled(false);\n\t\t}\n\n\t\tthis.mainActionRow.setComponents(Object.values(this.buttons) as PButtonBuilder[]);\n\t\tthis.actionRows = [this.mainActionRow];\n\t\tif (this.extraRows.length > 0) {\n\t\t\tfor (const row of this.extraRows) {\n\t\t\t\tif (row.position === ExtraRowPosition.Above) this.actionRows.unshift(...row.rows);\n\t\t\t\telse this.actionRows.push(...row.rows);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepare the message's payload.\n\t */\n\tprivate _readyPayloads(): Payload {\n\t\tthis._readyActionRows();\n\t\tthis.payload.ephemeral = this.ephemeral;\n\t\tthis.payload.components = this.actionRows;\n\t\tthis.payload.content = (Array.isArray(this.contents) ? this.contents[0] : this.contents) ?? undefined;\n\t\tconst embed = this.embeds.length ? EmbedBuilder.from(this.embeds[0]) : this;\n\t\tthis.payload.embeds = [embed];\n\t\tthis.payload.files = this.attachments;\n\t\treturn this.payload;\n\t}\n}\n","import type { BaseInteraction, Message, User } from 'discord.js';\n\nexport const authorOrUser = (messageOrInteraction: BaseInteraction | Message): User =>\n\t'user' in messageOrInteraction ? messageOrInteraction.user : messageOrInteraction.author;\n","import {\n\tBaseInteraction,\n\tComponentType,\n\tMessage,\n\tMessageComponentInteraction,\n\ttype ButtonInteraction,\n\ttype CommandInteraction,\n\ttype InteractionCollector,\n\ttype InteractionType,\n\ttype Snowflake,\n\ttype Interaction,\n\ttype InteractionResponse,\n\ttype GuildTextBasedChannel,\n\ttype DMChannel\n} from 'discord.js';\n\nimport { PaginationEmbed } from './PaginationEmbed.js';\n\nimport { authorOrUser } from '../utils/index.js';\n\nimport type { Options } from '../types';\n\n/**\n * The pagination class.\n */\nexport class Pagination extends PaginationEmbed {\n\t// #region public fields\n\n\t/**\n\t * The interaction that the paginator is for.\n\t *\n\t * @readonly\n\t */\n\tpublic readonly interaction: Exclude<Interaction<'cached'>, { type: InteractionType.ApplicationCommandAutocomplete }> | Message;\n\n\t/**\n\t * All the authorized users who can use the pagination buttons\n\t */\n\tpublic authorizedUsers: Snowflake[];\n\n\t/**\n\t * The collector of the pagination.\n\t */\n\tpublic collector?: InteractionCollector<ButtonInteraction<'cached'>> | InteractionCollector<ButtonInteraction>;\n\n\t// #end region\n\n\t/**\n\t * @param messageOrInteraction - The message or interaction to reply with the pagination message\n\t * @param options - The pagination options\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction, {\n\t *  firstEmoji: \"⏮\",\n\t *  prevEmoji: \"◀️\",\n\t *  nextEmoji: \"▶️\",\n\t *  lastEmoji: \"⏭\",\n\t *  limit: 5,\n\t *  idle: 5 * 60 * 1000,\n\t *  ephemeral: false,\n\t *  prevDescription: \"\",\n\t *  postDescription: \"\",\n\t *  attachments: [],\n\t *  buttonStyle: \"SECONDARY\",\n\t *  loop: false,\n\t * });\n\t * ```\n\t */\n\tpublic constructor(\n\t\tmessageOrInteraction: Exclude<Interaction, { type: InteractionType.ApplicationCommandAutocomplete }> | Message,\n\t\toptions: Partial<Options> = {}\n\t) {\n\t\tsuper(options);\n\t\tif (!(messageOrInteraction instanceof BaseInteraction) && !(messageOrInteraction instanceof Message)) {\n\t\t\tconsole.warn(\n\t\t\t\t`[pagination.djs] warn - The interaction must be an instance of Interaction or Message, received + ${\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\t\t\t\tmessageOrInteraction\n\t\t\t\t\t\t? ((messageOrInteraction as any).construction?.name ?? (messageOrInteraction as any).name ?? typeof messageOrInteraction)\n\t\t\t\t\t\t: typeof messageOrInteraction\n\t\t\t\t}\\nFor more information, see: https://github.com/imranbarbhuiya/pagination.djs/issues/68 or https://github.com/imranbarbhuiya/pagination.djs/issues/88`\n\t\t\t);\n\t\t}\n\n\t\t// This is done to avoid confusion for end users. Also interaction mostly comes from cached guilds so it's safe to cast it.\n\t\tthis.interaction = messageOrInteraction as Exclude<Interaction<'cached'>, { type: InteractionType.ApplicationCommandAutocomplete }>;\n\t\tthis.authorizedUsers = [authorOrUser(messageOrInteraction).id];\n\t}\n\n\t// #region authorized users related\n\n\t/**\n\t * Sets authorized users who can use these pagination buttons.\n\t * Leave it a empty array to allow everyone to use the pagination.\n\t *\n\t * @param authorizedUsers - The users to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAuthorizedUsers([userId1, userId2, userId3]);\n\t * ```\n\t */\n\tpublic setAuthorizedUsers(authorizedUsers: Snowflake[]): this {\n\t\tthis.authorizedUsers = authorizedUsers;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a authorized user who can use these pagination buttons.\n\t *\n\t * @param authorizedUser - The user to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .addAuthorizedUser(userId1);\n\t * ```\n\t */\n\tpublic addAuthorizedUser(authorizedUser: Snowflake): this {\n\t\tthis.authorizedUsers.push(authorizedUser);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple authorized users who can use these pagination buttons.\n\t *\n\t * @param authorizedUsers - The users to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .addAuthorizedUsers([userId1, userId2, userId3]);\n\t * ```\n\t */\n\tpublic addAuthorizedUsers(authorizedUsers: Snowflake[]): this {\n\t\tthis.authorizedUsers.push(...authorizedUsers);\n\t\treturn this;\n\t}\n\n\t// #end region\n\n\t/**\n\t * Makes the pagination interactive.\n\t *\n\t * @param message - The message to listen for interactions\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.paginate(message);\n\t * ```\n\t */\n\tpublic paginate(message: InteractionResponse<true> | Message): this {\n\t\tthis.collector = message.createMessageComponentCollector({\n\t\t\tfilter: ({ customId, user }) =>\n\t\t\t\t['first', 'prev', 'next', 'last'].some((position) => this.buttons[position]?.data.custom_id === customId) &&\n\t\t\t\t(this.authorizedUsers.length ? this.authorizedUsers.includes(user.id) : true),\n\t\t\tidle: this.idle,\n\t\t\tcomponentType: ComponentType.Button\n\t\t});\n\n\t\tthis.collector.on('collect', async (interaction) => {\n\t\t\tif (interaction.customId === this.buttons.first?.data.custom_id) {\n\t\t\t\tawait this.goFirst(interaction);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (interaction.customId === this.buttons.prev?.data.custom_id) {\n\t\t\t\tawait this.goPrev(interaction);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (interaction.customId === this.buttons.next?.data.custom_id) {\n\t\t\t\tawait this.goNext(interaction);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (interaction.customId === this.buttons.last?.data.custom_id) await this.goLast(interaction);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends the final message.\n\t * By default, it will send as a reply to the message\n\t * but if the interaction is already replied or deferred then it will `editReply`.\n\t * If you want to send follow-up or update the interaction, then use {@link Pagination.followUp} or {@link Pagination.update} instead.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.render();\n\t * ```\n\t */\n\tpublic async render(): Promise<InteractionResponse<true> | Message> {\n\t\tif (this.interaction instanceof BaseInteraction && (this.interaction.replied || this.interaction.deferred)) return this.editReply();\n\n\t\treturn this.reply();\n\t}\n\n\t/**\n\t * Replies the final message.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.reply();\n\t * ```\n\t */\n\tpublic async reply(): Promise<InteractionResponse<true> | Message> {\n\t\tconst payload = this.ready();\n\t\tconst message = await (this.interaction as unknown as CommandInteraction<'cached'>).reply(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Sends the reply as a `followUp`.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.followUp();\n\t * ```\n\t */\n\tpublic async followUp(): Promise<Message> {\n\t\tconst payload = this.ready();\n\t\tif (!(this.interaction instanceof BaseInteraction)) throw new TypeError('The interaction is not an instance of Interaction');\n\t\tconst message = await this.interaction.followUp(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Edits the original reply with the final message.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.editReply();\n\t * ```\n\t */\n\tpublic async editReply(): Promise<Message> {\n\t\tconst payload = this.ready();\n\t\tif (!(this.interaction instanceof BaseInteraction)) throw new TypeError('The interaction is not an instance of Interaction');\n\t\tconst message = await this.interaction.editReply(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Updates the interaction's pagination.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.update();\n\t * ```\n\t */\n\tpublic async update(): Promise<InteractionResponse<true> | Message> {\n\t\tconst payload = this.ready();\n\t\tif (!(this.interaction instanceof MessageComponentInteraction))\n\t\t\tthrow new TypeError('The interaction is not an instance of MessageComponentInteraction');\n\t\tconst message = await this.interaction.update(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Sends the final message in the interaction's channel.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.send();\n\t * ```\n\t */\n\tpublic async send(): Promise<Message> {\n\t\tconst payload = this.ready();\n\t\tif (!this.interaction.channel) throw new Error(\"The interaction or message don't have a channel\");\n\t\tif (this.interaction.channel.partial) await this.interaction.channel.fetch();\n\t\tif (this.interaction.channel.partial) throw new Error('The interaction or message has a partial channel');\n\t\tconst message = await (this.interaction.channel as DMChannel | GuildTextBasedChannel).send(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n}\n"]}